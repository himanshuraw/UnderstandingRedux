//Ducks Pattern
import { createSlice, PayloadAction } from "@reduxjs/toolkit";
//createSlice : Main API fuction to define theb redux logic.
//PayloadAction : TS type representing the content of one given action object.

interface CounterState {
  value: number;
}

const initialState: CounterState = {
  value: 0,
};

//Slice containing the reducer logic
// The action types are autogenerated as //* name/reducer
const counterSlice = createSlice({
  name: "counter",
  initialState,
  reducers: {
    //ES6 object literal syntax:
    //?  We can define funtion and object without any seperate function keyword or any arrow
    incremented(state) {
      state.value++; // It's okay to do this "IMMER" makes it immutable under the hood.
    },
    amountAdded(state, action: PayloadAction<number>) {
      state.value += action.payload;
    },
    //decremented()
    //other reducers..
  },
});
//hover over incremented : ActionCreatorWithoutPayload
export const { incremented, amountAdded } = counterSlice.actions;
export default counterSlice.reducer;
